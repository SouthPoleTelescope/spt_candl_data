#------Experiments to test (separated with commas)-----
data.experiments=['SPT3G_D1_TnE_candl']

#------ Parameter list -------
# data.parameters[class name] = [mean, min, max, 1-sigma, scale, role]
# - if min max irrelevant, put to -1 or None (if you want a boundary of -1, use -1.0)
# - if fixed, put 1-sigma to 0
# - if scale irrelevant, put to 1, otherwise to the appropriate factor
# - role is either 'cosmo', 'nuisance' or 'derived'

# Class computation products needed
# These are handled by candl under the hood
#data.cosmo_arguments['output'] = 'tCl pCl lCl'

# Cosmological parameters list
data.parameters['omega_b'] 	= [2.233,  -1,-1, 0.018, 0.01,'cosmo']
data.parameters['omega_cdm'] 	= [0.1198, -1,-1, 0.0024,1,   'cosmo']
data.parameters['n_s']       	= [0.963,  -1,-1, 0.004, 1,   'cosmo']
data.parameters['ln10^{10}A_s']       	= [3.043,   -1,-1, 0.016, 1,'cosmo']
data.parameters['H0']         	= [67.37,  -1,-1, 0.91,1,   'cosmo']
data.parameters['tau_reio']    	= [0.054,  -1,-1, 0.0074,1,   'cosmo']

# Nuisance parameter list, same call, except the name does not have to be a class name
# Note the nuisance parameters must follow *immediately after* the cosmo parameters,
# MP expects cosmo, nuisance, derived

#------ Parameter list -------
# data.parameters[class name] = [mean, min, max, 1-sigma, scale, role]
# - if min max irrelevant, put to -1 or None (if you want a boundary of -1, use -1.0)
# - if fixed, put 1-sigma to 0
# - if scale irrelevant, put to 1, otherwise to the appropriate factor
# - role is either 'cosmo', 'nuisance' or 'derived'
#------ Parameter list -------
# data.parameters[class name] = [mean, min, max, 1-sigma, scale, role]
data.parameters['EE_PolGalDust_Alpha'] = [-2.4168015133765848, -5.0, -1.0, 0.2, 1, 'nuisance']
data.parameters['EE_PolGalDust_Amp'] = [0.05699852696787985, 0.0, 10.0, 0.5, 1, 'nuisance']
data.parameters['EE_PolGalDust_Beta'] = [1.5081006277777447, 1.0, 2.0, 0.05, 1, 'nuisance']
data.parameters['Ecal_ext150'] = [1.0096200923085388, 0.8, 1.2, 0.02, 1, 'nuisance']
data.parameters['Ecal_rel220'] = [0.9956889292218284, 0.8, 1.2, 0.02, 1, 'nuisance']
data.parameters['Ecal_rel90'] = [0.9986226815717356, 0.8, 1.2, 0.02, 1, 'nuisance']
data.parameters['Kappa'] = [4.877458809121052e-06, -0.05, 0.05, 0.005, 1, 'nuisance']
data.parameters['T2P2_150'] = [-0.014640193719050228, -1.0, 1.0, 0.1, 1, 'nuisance']
data.parameters['T2P2_220'] = [-0.02843082802353394, -1.0, 1.0, 0.1, 1, 'nuisance']
data.parameters['T2P2_90'] = [-0.006901264844123428, -1.0, 1.0, 0.1, 1, 'nuisance']
data.parameters['TE_PolGalDust_Alpha'] = [-2.4336574063512777, -5.0, -1.0, 0.2, 1, 'nuisance']
data.parameters['TE_PolGalDust_Amp'] = [0.10359042604110852, 0.0, 10.0, 0.5, 1, 'nuisance']
data.parameters['TE_PolGalDust_Beta'] = [1.5116017911414021, 1.0, 2.0, 0.05, 1, 'nuisance']
data.parameters['TT_CIBClustering_Alpha'] = [0.514063166365708, 0.0, 2.0, 0.1, 1, 'nuisance']
data.parameters['TT_CIB_150x150'] = [1.8755978848053552, 0.0, 200.0, 10.0, 1, 'nuisance']
data.parameters['TT_CIB_150x220'] = [7.5048931910914956, 0.0, 200.0, 10.0, 1, 'nuisance']
data.parameters['TT_CIB_220x220'] = [35.42066847355289, 0.0, 200.0, 10.0, 1, 'nuisance']
data.parameters['TT_GalCirrus_Alpha'] = [-2.530208854730539, -5.0, -1.0, 0.2, 1, 'nuisance']
data.parameters['TT_GalCirrus_Amp'] = [1.985474379353584, 0.0, 50.0, 2.5, 1, 'nuisance']
data.parameters['TT_GalCirrus_Beta'] = [1.480057747327629, 1.0, 2.0, 0.05, 1, 'nuisance']
data.parameters['TT_Poisson_150x150'] = [11.872619988472335, 0.0, 200.0, 10.0, 1, 'nuisance']
data.parameters['TT_Poisson_150x220'] = [32.07434864862036, 0.0, 200.0, 10.0, 1, 'nuisance']
data.parameters['TT_Poisson_220x220'] = [95.02467452315211, 0.0, 200.0, 10.0, 1, 'nuisance']
data.parameters['TT_Poisson_90x150'] = [8.61952796282032, 0.0, 200.0, 10.0, 1, 'nuisance']
data.parameters['TT_Poisson_90x220'] = [16.63736541350286, 0.0, 200.0, 10.0, 1, 'nuisance']
data.parameters['TT_Poisson_90x90'] = [10.697261369590473, 0.0, 200.0, 10.0, 1, 'nuisance']
data.parameters['TT_kSZ_Amp'] = [2.3025333954649527, 0.0, 50.0, 2.5, 1, 'nuisance']
data.parameters['TT_tSZ_Amp'] = [0.939226633133669, 0.0, 50.0, 2.5, 1, 'nuisance']
data.parameters['Tcal_ext150'] = [1.0002829087744192, 0.8, 1.2, 0.02, 1, 'nuisance']
data.parameters['Tcal_rel220'] = [1.0086625222429995, 0.8, 1.2, 0.02, 1, 'nuisance']
data.parameters['Tcal_rel90'] = [1.0002057473508388, 0.8, 1.2, 0.02, 1, 'nuisance']
data.parameters['beta_1'] = [-0.45016583748734634, -5.0, 5.0, 0.5, 1, 'nuisance']
data.parameters['beta_2'] = [-0.6286753829117221, -5.0, 5.0, 0.5, 1, 'nuisance']
data.parameters['beta_3'] = [0.48764987966697554, -5.0, 5.0, 0.5, 1, 'nuisance']
data.parameters['beta_4'] = [-0.8644823173092157, -5.0, 5.0, 0.5, 1, 'nuisance']
data.parameters['beta_5'] = [-0.037168925950716754, -5.0, 5.0, 0.5, 1, 'nuisance']
data.parameters['beta_6'] = [-1.1023662943162276, -5.0, 5.0, 0.5, 1, 'nuisance']
data.parameters['beta_7'] = [0.12926663836645239, -5.0, 5.0, 0.5, 1, 'nuisance']
data.parameters['beta_8'] = [-0.3697908684339112, -5.0, 5.0, 0.5, 1, 'nuisance']
data.parameters['beta_9'] = [0.21868843569596694, -5.0, 5.0, 0.5, 1, 'nuisance']
data.parameters['beta_pol_150'] = [0.6158363026993121, 0.0, 1.0, 0.05, 1, 'nuisance']
data.parameters['beta_pol_220'] = [0.6149421853281525, 0.0, 1.0, 0.05, 1, 'nuisance']
data.parameters['beta_pol_90'] = [0.48319396965451367, 0.0, 1.0, 0.05, 1, 'nuisance']

# Derived parameter list
data.parameters['z_reio']       = [0,       -1, -1, 0,1,  'derived']
data.parameters['Omega_Lambda'] = [0,       -1, -1, 0,1,  'derived']

#------ Mcmc parameters ----
# Number of steps taken, by default (overwritten by the -N command)
data.N=10
# Number of accepted steps before writing to file the chain. Larger means less
# access to disc, but this is not so much time consuming.
data.write_step=5

# Note: MP will only interpret comments if the line begins with # (you cannot add comments at the end of lines!)
